<?php

namespace DoctrineORMModule\Proxy\__CG__\Warehouse\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class StockMergement extends \Warehouse\Entity\StockMergement implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'description', 'netquantity', 'unit', 'eqtblsp', 'eqcofsp', 'eqteasp', 'eqpinch', 'eqpiece', 'section', 'area', 'supplier'];
        }

        return ['__isInitialized__', 'id', 'description', 'netquantity', 'unit', 'eqtblsp', 'eqcofsp', 'eqteasp', 'eqpinch', 'eqpiece', 'section', 'area', 'supplier'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (StockMergement $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getNetquantity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNetquantity', []);

        return parent::getNetquantity();
    }

    /**
     * {@inheritDoc}
     */
    public function setNetquantity($netquantity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNetquantity', [$netquantity]);

        return parent::setNetquantity($netquantity);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnit', []);

        return parent::getUnit();
    }

    /**
     * {@inheritDoc}
     */
    public function setUnit($unit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUnit', [$unit]);

        return parent::setUnit($unit);
    }

    /**
     * {@inheritDoc}
     */
    public function getEqtblsp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEqtblsp', []);

        return parent::getEqtblsp();
    }

    /**
     * {@inheritDoc}
     */
    public function setEqtblsp($eqtblsp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEqtblsp', [$eqtblsp]);

        return parent::setEqtblsp($eqtblsp);
    }

    /**
     * {@inheritDoc}
     */
    public function getEqcofsp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEqcofsp', []);

        return parent::getEqcofsp();
    }

    /**
     * {@inheritDoc}
     */
    public function setEqcofsp($eqcofsp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEqcofsp', [$eqcofsp]);

        return parent::setEqcofsp($eqcofsp);
    }

    /**
     * {@inheritDoc}
     */
    public function getEqteasp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEqteasp', []);

        return parent::getEqteasp();
    }

    /**
     * {@inheritDoc}
     */
    public function setEqteasp($eqteasp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEqteasp', [$eqteasp]);

        return parent::setEqteasp($eqteasp);
    }

    /**
     * {@inheritDoc}
     */
    public function getEqpinch()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEqpinch', []);

        return parent::getEqpinch();
    }

    /**
     * {@inheritDoc}
     */
    public function setEqpinch($eqpinch)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEqpinch', [$eqpinch]);

        return parent::setEqpinch($eqpinch);
    }

    /**
     * {@inheritDoc}
     */
    public function getEqpiece()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEqpiece', []);

        return parent::getEqpiece();
    }

    /**
     * {@inheritDoc}
     */
    public function setEqpiece($eqpiece)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEqpiece', [$eqpiece]);

        return parent::setEqpiece($eqpiece);
    }

    /**
     * {@inheritDoc}
     */
    public function getSection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSection', []);

        return parent::getSection();
    }

    /**
     * {@inheritDoc}
     */
    public function setSection($section)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSection', [$section]);

        return parent::setSection($section);
    }

    /**
     * {@inheritDoc}
     */
    public function getArea()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArea', []);

        return parent::getArea();
    }

    /**
     * {@inheritDoc}
     */
    public function setArea($area)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArea', [$area]);

        return parent::setArea($area);
    }

    /**
     * {@inheritDoc}
     */
    public function getSupplier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSupplier', []);

        return parent::getSupplier();
    }

    /**
     * {@inheritDoc}
     */
    public function setSupplier($supplier)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSupplier', [$supplier]);

        return parent::setSupplier($supplier);
    }

}
