
<div class="criteriadata">
    <h1>Search</h1>
    <form method="post" action="/warehouse/stockmergement/list">
        <input type="submit" value="Search"/>
        <p></p>
        <p>Description contents:</p>
        <input type="text" name="description" id="description" value="">
        <hr>
        <div id="areaList">Area:
            <select name="area" v-model="selectedArea">
                <option v-for="area in areas" :value="area.id">{{area.description}}</option>
            </select>
        </div>
        <hr>
        <span id="sectionList">
            <p>Section:</p>
            <div class="text-uppercase text-bold"></div>
            <label>
                <input type="checkbox" v-model="allChecked" @click="checkAll">
                All
            </label>
            <div v-for="section in sections">
                <label>
                    <input type="checkbox" :id="section.description" name="sections[]" :value="section.id" v-model="sectionsIds" @change="check(section.id)">
                    {{section.description}}
                </label>
            </div>
        </span>
    </form>
</div>

<div class="listdata" id="stockList">
    <h1>Inventory</h1>
    <form method="get" action="/warehouse/stockmergement/add">
        <input type="submit" value="New"/>
    </form>
    <table class="table table-striped">
        <thead>
        <tr>
            <th @click="sort('description')">
                <u v-if="currentSort === 'description'">Description</u>
                <font v-else>Article description</font>
            </th>
            <th @click="sort('quantity')">
                <u v-if="currentSort === 'quantity'">Net Quantity</u>
                <font v-else>Net Quantity</font>
            </th>
        </tr>
        </thead>
        <tbody>
        <tr v-for="stock in sortedStock">
            <td><div class="col-md-10"><a :href="'/warehouse/stockmergement/display/id/' + stock.id + ''">{{stock.description}}</a></div></td>
            <td>{{stock.netquantity}} {{stock.unit}}</td>
        </tr>
        </tbody>
    </table>
    <table width="370px">
        <tr v-if="pagesNumber > 0">
            <td width="5%" align="left"><a @click="firstPage"><<</a></td>
            <td width="5%" align="right"><a @click="prevPage"><</a></td>
            <td width="30%" align="middle">Page {{currentPage}} / {{pagesNumber}}</td>
            <td width="5%" align="left"><a @click="nextPage">></a></td>
            <td width="5%" align="right"><a @click="lastPage">>></a></td>
            <td width="50%">
                <select id="limit" @change="changeLimit">
                    <option value="20">20</option>
                    <option value="40">40</option>
                    <option value="60">60</option>
                    <option value="100">100</option>
                </select>
                (per page)
            </td>
        </tr>
        <tr v-else>
            <td width="10%" align="left"><i>No data corresponding to these criterias</i></td>
        </tr>
    </table>
</div>

<!--<script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.min.js"></script>-->
<script src="../../../../js/vue.min.js"></script>
<script>
    const areaList = new Vue({
        el: '#areaList',
        data: {
            areas: [],
            selectedArea: ''
        },
        created: function () {
            this.areas = <?= $this->areas; ?>;
            this.selectedArea = <?= $this->selectedArea; ?>;
        }
    });

    const sectionList = new Vue({
        el: '#sectionList',
        data: {
            sections: [],
            sectionsIds: [],
            checked: [],
            allChecked: false,
            sectionSize: 0,
            sortedSections: []
        },
        created: function () {
            this.sections = <?= $this->sections; ?>;
            for (section in this.sections) {
                if (this.sections[section].checked) {
                    this.sectionsIds.push(this.sections[section].id.toString());
                }
                this.sectionSize = this.sectionSize + 1;
            }

            if (this.sectionSize == this.sectionsIds.length) {
                this.allChecked = true;
            } else {
                this.allChecked = false;
            }
        },
        methods: {
            checkAll: function() {
                this.sectionsIds = [];
                for (section in this.sections) {
                    if (this.allChecked) {
                        this.sectionsIds.push(this.sections[section].id.toString());
                        this.sections[section].checked = true;
                    } else {
                        this.sections[section].checked = false;
                    }
                }
            },
            check: function(id) {
                if (this.sections[id].checked) {
                    this.sections[id].checked = false;
                } else {
                    this.sections[id].checked = true;
                }

                this.sectionsIds = [];
                for (section in this.sections) {
                    if (this.sections[section].checked) {
                        this.sectionsIds.push(this.sections[section].id.toString());
                    }
                }

                if (this.sectionSize == this.sectionsIds.length) {
                    this.allChecked = true;
                } else {
                    this.allChecked = false;
                }
            }
        }
    });

    const stocklist = new Vue({
            el:'#stockList',
            data:{
                stock:[],
                sections:[],
                currentSort:'description',
                currentSortDir:'asc',
                pageSize:20,
                currentPage:1,
                stockSize:0,
                pagesNumber:1
            },
            created:function() {
                this.stock = <?= $this->stock; ?>;
                this.sections = <?= $this->sections; ?>;
                this.stockSize = this.stock.length;
                this.pagesNumber = Math.ceil(this.stockSize / this.pageSize);
            },
            methods:{
                sort:function(s) {
                    if(s === this.currentSort) {
                        this.currentSortDir = this.currentSortDir==='asc'?'desc':'asc';
                    }
                    this.currentSort = s;
                },
                firstPage:function() {
                    this.currentPage = 1;
                },
                nextPage:function() {
                    if((this.currentPage*this.pageSize) < this.stock.length) this.currentPage++;
                },
                prevPage:function() {
                    if(this.currentPage > 1) this.currentPage--;
                },
                lastPage:function() {
                    this.currentPage = Math.ceil(this.stockSize / this.pageSize);
                },
                changeLimit:function() {
                    var e = document.getElementById("limit");
                    this.pageSize = e.options[e.selectedIndex].value;
                    this.pagesNumber = Math.ceil(this.stockSize / this.pageSize);
                },
            },
            computed:{
                sortedStock:function() {
                    return this.stock.sort((a,b) => {
                            let modifier = 1;
                    if(this.currentSortDir === 'desc') modifier = -1;
                    if(a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
                    if(a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
                    return 0;
                }).filter((row, index) => {
            let start = (this.currentPage-1)*this.pageSize;
    let end = this.currentPage*this.pageSize;
    if(index >= start && index < end) return true;
    });
    }
    }
    }
    )
</script>