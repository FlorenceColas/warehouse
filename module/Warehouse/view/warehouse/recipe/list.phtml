<div class="criteriadata" id="categoriesList">
    <h1>Search</h1>
    <form method="post" action="/warehouse/recipe/list">
        <input type="submit" value="Search"/>
        <p></p>
        <p>Description contents:</p>
        <input type="text" name="description" id="description" value="">
        <hr>
        <p>Categories:</p>
        <div class="text-uppercase text-bold"></div>
        <label>
            <input type="checkbox" v-model="allChecked" @click="checkAll">
            All
        </label>
        <div v-for="cat in categories">
            <label>
                <input type="checkbox" name="categories[]" :value="cat.id" v-model="categoriesIds" @change="check(cat.id)">
                {{cat.label}}
            </label>
        </div>
    </form>
</div>

<div class="listdata" id="recipeslist">
    <h1>Recipes</h1>
    <form method="get" action="/warehouse/recipe/add">
        <input type="submit" value="New"/>
    </form>
    <table class="table table-striped">
        <thead>
        <tr>
            <th></th>
            <th></th>
            <th @click="sort('description')">
                <u v-if="currentSort === 'description'">Description</u>
                <font v-else>Recipe description</font>
            </th>
            <th @click="sort('serves')">
                <u v-if="currentSort === 'serves'">Serves</u>
                <font v-else>Serves</font>
            </th>
            <th @click="sort('preparationTime')">
                <u v-if="currentSort === 'preparationTime'">Preparation time</u>
                <font v-else>Preparation time</font>
            </th>
            <th @click="sort('totalTime')">
                <u v-if="currentSort === 'totalTime'">Total time</u>
                <font v-else>Total time</font>
            </th>
        </tr>
        </thead>
        <tbody>
        <tr v-for="recipe in sortedRecipes">
            <td align="center">
                <div v-if="recipe.filename != null" class="col-md-10">
                    <img style="max-height: 20px; width: auto;" :src="'/upload/recipe/thumb/' + recipe.filename" alt="no photo"/>
                </div>
            </td>
            <td>
                <div class="col-md-20">
                    <a title="Add the 'Not on stock' ingredients to the shopping list" class="shoppinglist" :href="'/warehouse/recipe/shoppinglist/id/' + recipe.id + '?from=list'"><img style="max-height: 18px; width: auto;" src="../../../../img/caddie.png" id="buy" alt=""/></a>
                    <a title="Add the 'Out to stock' list" class="stockinterface" :href="'/warehouse/recipe/stockinterface/id/' + recipe.id + '?from=list'"><img style="max-height: 18px; width: auto;" src="../../../../img/toque2.jpg" id="out" alt=""/></a>
                </div>
            </td>
            <td><div class="col-md-10"><a :href="'/warehouse/recipe/display/id/' + recipe.id + ''">{{recipe.description}}</a></div></td>
            <td>{{recipe.serves}}</td>
            <td>{{recipe.preparationTime}}</td>
            <td>{{recipe.totalTime}}</td>
        </tr>
        </tbody>
    </table>
    <table width="370px">
        <tr v-if="pagesNumber > 0">
            <td width="5%" align="left"><a @click="firstPage"><<</a></td>
            <td width="5%" align="right"><a @click="prevPage"><</a></td>
            <td width="30%" align="middle">Page {{currentPage}} / {{pagesNumber}}</td>
            <td width="5%" align="left"><a @click="nextPage">></a></td>
            <td width="5%" align="right"><a @click="lastPage">>></a></td>
            <td width="50%">
                <select id="limit" @change="changeLimit">
                    <option value="20">20</option>
                    <option value="40">40</option>
                    <option value="60">60</option>
                    <option value="100">100</option>
                </select>
                (per page)
            </td>
        </tr>
        <tr v-else>
            <td width="10%" align="left"><i>No data corresponding to these criterias</i></td>
        </tr>
    </table>
</div>

<!--<script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.min.js"></script>-->
<script src="../../../../js/vue.min.js"></script>
<script>
    const categoriesList = new Vue({
        el: '#categoriesList',
        data: {
            categories: [],
            categoriesIds: [],
            checked: [],
            allChecked: false,
            catSize: 0
        },
        created: function () {
            this.categories = <?= $this->categories; ?>;
            for (cat in this.categories) {
                if (this.categories[cat].checked) {
                    this.categoriesIds.push(this.categories[cat].id.toString());
                }
                this.catSize = this.catSize + 1;
            }

            if (this.catSize == this.categoriesIds.length) {
                this.allChecked = true;
            } else {
                this.allChecked = false;
            }
        },
        methods: {
            checkAll: function() {
                this.categoriesIds = [];
                for (cat in this.categories) {
                    if (this.allChecked) {
                        this.categoriesIds.push(this.categories[cat].id.toString());
                        this.categories[cat].checked = true;
                     } else {
                        this.categories[cat].checked = false;
                    }
                }
            },
            check: function(id) {
                if (this.categories[id].checked) {
                    this.categories[id].checked = false;
                } else {
                    this.categories[id].checked = true;
                }

                this.categoriesIds = [];
                for (cat in this.categories) {
                    if (this.categories[cat].checked) {
                        this.categoriesIds.push(this.categories[cat].id.toString());
                    }
                }

                if (this.catSize == this.categoriesIds.length) {
                    this.allChecked = true;
                } else {
                    this.allChecked = false;
                }
            }
        }
    });

    const recipeslist = new Vue({
            el:'#recipeslist',
            data:{
                recipes:[],
                categories:[],
                currentSort:'description',
                currentSortDir:'asc',
                pageSize:20,
                currentPage:1,
                recipesSize:0,
                pagesNumber:1
            },
            created:function() {
                this.recipes = <?= $this->recipes; ?>;
                this.categories = <?= $this->categories; ?>;
                this.recipesSize = this.recipes.length;
                this.pagesNumber = Math.ceil(this.recipesSize / this.pageSize);
            },
            methods:{
                sort:function(s) {
                    if(s === this.currentSort) {
                        this.currentSortDir = this.currentSortDir==='asc'?'desc':'asc';
                    }
                    this.currentSort = s;
                },
                firstPage:function() {
                    this.currentPage = 1;
                },
                nextPage:function() {
                    if((this.currentPage*this.pageSize) < this.recipes.length) this.currentPage++;
                },
                prevPage:function() {
                    if(this.currentPage > 1) this.currentPage--;
                },
                lastPage:function() {
                    this.currentPage = Math.ceil(this.recipesSize / this.pageSize);
                },
                changeLimit:function() {
                    var e = document.getElementById("limit");
                    this.pageSize = e.options[e.selectedIndex].value;
                    this.pagesNumber = Math.ceil(this.recipesSize / this.pageSize);
                },
            },
            computed:{
                sortedRecipes:function() {
                    return this.recipes.sort((a,b) => {
                            let modifier = 1;
                    if(this.currentSortDir === 'desc') modifier = -1;
                    if(a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
                    if(a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
                    return 0;
                    }).filter((row, index) => {
                        let start = (this.currentPage-1)*this.pageSize;
                        let end = this.currentPage*this.pageSize;
                        if(index >= start && index < end) return true;
                    });
                }
            }
        }
    )
</script>
